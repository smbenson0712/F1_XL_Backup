#####################################################################
#   Orca Slicer
#####################################################################
# Enable object exclusion
[exclude_object]

# Enable arcs support
[gcode_arcs]
resolution: 0.1

#####################################################################
#   Client Variables for Pause/Cancel Resume
#####################################################################

# [gcode_macro _CLIENT_VARIABLE]
# variable_use_custom_pos   : False ; use custom park coordinates for x,y [True/False]
# variable_custom_park_x    : 0.0   ; custom x position; value must be within your defined min and max of X
# variable_custom_park_y    : 0.0   ; custom y position; value must be within your defined min and max of Y
# variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
# variable_retract          : 1.0   ; the value to retract while PAUSE
# variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
# variable_speed_retract    : 35.0  ; retract speed in mm/s
# variable_unretract        : 1.0   ; the value to unretract while RESUME
# variable_speed_unretract  : 35.0  ; unretract speed in mm/s
# variable_speed_hop        : 15.0  ; z move speed in mm/s
# variable_speed_move       : 100.0 ; move speed in mm/s
# variable_park_at_cancel   : False ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
# variable_park_at_cancel_x : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
# variable_park_at_cancel_y : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
# # !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
# variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
# variable_idle_timeout     : 0     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
# variable_runout_sensor    : ""    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
# #                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
# # !!! Custom macros, please use with care and review the section of the corresponding macro.
# # These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
# # Only  single line commands are supported, please create a macro if you need more than one command.
# variable_user_pause_macro : ""    ; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
# variable_user_resume_macro: ""    ; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
# variable_user_cancel_macro: ""    ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
# gcode:


#####################################################################
# Tool Changes Macros
#####################################################################
# Helper script to park the carriage (called from T0 and T1 macros)
[gcode_macro PARK_extruder]
gcode:
    SAVE_GCODE_STATE NAME=park0
    G90
    G1 X-55 F6000
    RESTORE_GCODE_STATE NAME=park0

# Activate the primary extruder
[gcode_macro T0]
gcode:
    PARK_{printer.toolhead.extruder}
    ACTIVATE_EXTRUDER EXTRUDER=extruder
    SET_DUAL_CARRIAGE CARRIAGE=0
    SET_GCODE_OFFSET Y=0

[gcode_macro PARK_extruder1]
gcode:
    SAVE_GCODE_STATE NAME=park1
    G90
    G1 X550 F6000
    RESTORE_GCODE_STATE NAME=park1

[gcode_macro T1]
gcode:
    PARK_{printer.toolhead.extruder}
    ACTIVATE_EXTRUDER EXTRUDER=extruder1
    SET_DUAL_CARRIAGE CARRIAGE=1
    SET_GCODE_OFFSET Y=15

#####################################################################
# Copy Mode Macro
#####################################################################
# A helper script to activate copy mode
[gcode_macro ACTIVATE_COPY_MODE]
gcode:
    SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
    G1 X0
    ACTIVATE_EXTRUDER EXTRUDER=extruder
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
    G1 X245
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=COPY
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder
    
#####################################################################
# Mirror Mode Macro
#####################################################################
# A helper script to activate mirror mode
[gcode_macro ACTIVATE_MIRROR_MODE]
gcode:
    SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
    G1 X0
    ACTIVATE_EXTRUDER EXTRUDER=extruder
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
    G1 X245
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=MIRROR
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder
    
# ## add to T0 macro
# SET_GCODE_VARIABLE MACRO=FAN_VARIABLE VARIABLE=active_fan VALUE=0
# CARRIAGE_PRINT_FAN 

# ## add to T1 macro
# SET_GCODE_VARIABLE MACRO=FAN_VARIABLE VARIABLE=active_fan VALUE=1
# CARRIAGE_PRINT_FAN

##########################################################
# PRINTER FANS MANAGEMENT
# Redefine G-code command M106 and M107 
##########################################################

[gcode_macro M106]
description: Override "M106" to allow multiple extruders.
gcode:

    
    {% set raw_speed = params.S|default(255)|float %}
    {% set fan_speed = (raw_speed / 255.0)|round(2) %} 

    {% if (params.P) is defined %}  
      {% set target_fan = params.P|int %}     
      {% set default_fan = ('fan', 'fan1', 'fan2', 'fan3', 'fan4', 'fan5')[target_fan] %}  
       SET_FAN_SPEED FAN={default_fan} SPEED={fan_speed}
    {% else %}
        ### carriages print cooling FAN   
        CARRIAGE_PRINT_FAN SPEED={fan_speed}       
    {% endif %}

#=============================================================== 


[gcode_macro M107]
description: Override "M107" to allow multiple extruders.
gcode:

    {% if (params.P) is defined %} 
      M106 S0 P{params.P}
    {% else %}
      M106 S0
    {% endif %}

#===============================================================
 
[gcode_macro CARRIAGE_PRINT_FAN]
description: Set automatically the print fan speed for dual carriages modes 

#--- Carriages print cooling FANs ---
variable_fan: 'fan'    # carriage X1
variable_fan1: 'fan1'   # carriage X2

gcode:
     
    ### FAN speed  
    {% if params.SPEED is defined %}
        {% set fan_speed = params.SPEED|float %}
    {% else %}
        ### read print fan speed from active carriage/extruder        
        {% set fan_speed = printer["fan_generic " + fan].speed|float %}
        {% set fan1_speed = printer["fan_generic " + fan1].speed|float %}
        {% set fan_speed = [fan_speed, fan1_speed]|max %}
    {% endif %}


    ### Active FAN for carriage
    {% set active_toolhead =({'extruder':0,'extruder1':1,'extruder2':2,'extruder3':3})[printer['toolhead'].extruder] %}    
    
     {% if active_toolhead in [0,1] %}   
        ### FAN on carriage X1       
        SET_FAN_SPEED FAN={fan} SPEED={fan_speed}
        SET_FAN_SPEED FAN={fan1} SPEED=0

     {% elif active_toolhead in [2,3] %}   
        ### FAN on carriage X2        
        SET_FAN_SPEED FAN={fan} SPEED=0
        SET_FAN_SPEED FAN={fan1} SPEED={fan_speed}
    {% endif %}

#####################################################################
# Start Print/End Print Macros
#####################################################################
[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customize for your slicer of choice
gcode:

    # Parameters
    {% set bed_temp = params.BED|int %}
    {% set extruder_temp = params.EXTRUDER|int %}

    #Set Controller Fan to 100%
    SET_FAN_SPEED FAN=electronics SPEED=1.0 
    #Heat Bed
    M190 S{bed_temp}          ; set & wait for bed temp

    #Home and Z-Tilt
    G28                            ; home all axes
    Z_TILT_ADJUST                  ;z-tilt adjust
    Park_extruder
    
    #Heat Extruder
    M109 S{extruder_temp}
    #Load bed mesh
    BED_MESH_PROFILE LOAD="60"
    G1 Z10 F3000                   ; move nozzle away from bed
    G1 X3.1 Y50 Z0.3 F5000.0 		; Move to start position
    G1 X3.1 Y200.0 Z0.3 F1500.0 E15 	; Draw the first line
    G1 X3.5 Y200.0 Z0.3 F5000.0 	; Move to side a little
    G1 X3.5 Y50 Z0.3 F1500.0 E30 	; Draw the second line
    G92 E0 ; Reset Extruder
    M82 ; set absolute E
    G1 Z2.0 F3000 			; Move Z Axis up little to prevent scratching of Heat Bed
    G1 X5 Y50 Z0.3 F5000.0 		; Move over to prevent blob squish

[gcode_macro PRINT_START_COPY]
#   Use PRINT_START for the slicer starting script - please customize for your slicer of choice
gcode:

    # Parameters
    {% set bed_temp = params.BED|int %}
    {% set extruder_temp = params.EXTRUDER|int %}

    #Set Controller Fan to 100%
    SET_FAN_SPEED FAN=electronics SPEED=1.0 
    #Heat Bed
    M190 S{bed_temp}          ; set & wait for bed temp

    #Home and Z-Tilt
    G28                            ; home all axes
    Z_TILT_ADJUST                  ;z-tilt adjust
    Park_extruder

    #Enter Copy Mode
    ACTIVATE_COPY_MODE
    #Heat Extruder
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={extruder_temp}
    SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET={extruder_temp}
    M109 S{extruder_temp}
    #Bed Mesh Adaptive
    BED_MESH_CALIBRATE TYPE=ADAPTIVE ADAPTIVE=1
    
    G1 Z10 F3000                   ; move nozzle away from bed
    G1 X3.1 Y50 Z0.3 F5000.0 		; Move to start position
    G1 X3.1 Y200.0 Z0.3 F1500.0 E15 	; Draw the first line
    G1 X3.5 Y200.0 Z0.3 F5000.0 	; Move to side a little
    G1 X3.5 Y50 Z0.3 F1500.0 E30 	; Draw the second line
    G92 E0 ; Reset Extruder
    M82 ; set absolute E
    G1 Z2.0 F3000 			; Move Z Axis up little to prevent scratching of Heat Bed
    G1 X5 Y50 Z0.3 F5000.0 		; Move over to prevent blob squish
      
[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customize for your slicer of choice
gcode:
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F3600                 ; retract filament
    G91                            ; relative positioning

    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    #   Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 100) %}
        {% set z_safe = 100 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    G0 Z{z_safe} F3600             ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000  ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G90                            ; absolute positioning
    PARK_extruder
    G0 Y400 F3600       ; Bed to front
    #Set Controller Fan to 50%
    SET_FAN_SPEED FAN=electronics SPEED=0.5